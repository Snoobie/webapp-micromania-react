// @flow
import Box from '../components/box';
import Button from '../components/button';
import Heading from '../components/heading';
import Loading from '../components/loading';
import P from '../components/p';
import Page from '../components/page';
import React from 'react';
import Set from '../components/set';
import Text from '../components/text';
import TextInput from '../components/text-input';
import app from '../components/app';
import sitemap from '../lib/sitemap';
import { FormattedRelative } from 'react-intl';
import { gql, graphql } from 'react-apollo';

// TODO: Switch to Relay Modern once SSR will be properly documented.
// Types will be autogenerated after the switch. Don't spend time with it yet.

type AllPostsPost = {
  __typename: string,
  createdAt: string,
  id: string,
  text: string,
  updatedAt: string,
};

const AllPosts = ({
  data: { allPosts },
}: {
  data: { allPosts: ?Array<AllPostsPost> },
}) => {
  if (!allPosts) return <Loading />;
  return (
    <Box>
      {allPosts.map(post => <Post post={post} key={post.id} />)}
    </Box>
  );
};

const allPostsQuery = gql`
  query allPosts {
    allPosts(orderBy: createdAt_DESC) {
      createdAt
      updatedAt
      id
      text
    }
  }
`;

const AllPostsWithData = graphql(allPostsQuery)(AllPosts);

// Class, because we are using local state for this example.
// It's explicit as fuck for demonstration purposes.
// In real app, I would use Este forms.
class CreatePost extends React.Component {
  state = {
    disabled: false,
    error: '',
    text: '',
  };

  onTextChange = text => this.setState({ text });

  onSubmitEditing = () => {
    const { text } = this.state;
    const { createPost } = this.props;
    if (!text.trim()) return;
    this.setState({ disabled: true });
    createPost(text)
      .then(() => {
        this.setState({ disabled: false, error: '', text: '' });
      })
      .catch(error => {
        this.setState({ disabled: false, error });
      });
  };

  props: {
    createPost: string => Promise<*>,
  };

  render() {
    const { disabled, error, text } = this.state;
    return (
      <Box marginBottom={1}>
        <TextInput
          disabled={disabled}
          error={error && JSON.stringify(error)}
          label="New Post"
          onChange={this.onTextChange}
          onSubmitEditing={this.onSubmitEditing}
          placeholder="Say thing"
          value={text}
        />
      </Box>
    );
  }
}

const createPostMutation = gql`
  mutation createPost($text: String!) {
    createPost(text: $text) {
      id
    }
  }
`;

const CreatePostWithData = graphql(createPostMutation, {
  props: ({ mutate }) => ({
    createPost: text =>
      mutate({
        variables: { text },
        refetchQueries: [{ query: allPostsQuery }],
      }),
  }),
})(CreatePost);

const DeletePost = ({ deletePost }) =>
  <Button
    color="warning"
    marginVertical={0}
    onClick={deletePost}
    paddingHorizontal={0}
    size={-1}
  >
    delete
  </Button>;

const deletePostMutation = gql`
  mutation deletePost($id: ID!) {
    deletePost(id: $id) {
      id
    }
  }
`;

const DeletePostWithData = graphql(deletePostMutation, {
  props: ({ mutate, ownProps: { id } }) => ({
    deletePost: () =>
      mutate({
        variables: { id },
        update: (proxy, { data: { deletePost } }) => {
          const data = proxy.readQuery({ query: allPostsQuery });
          const idx = data.allPosts.findIndex(
            post => post.id === deletePost.id,
          );
          data.allPosts.splice(idx, 1);
          proxy.writeQuery({ query: allPostsQuery, data });
        },
      }),
  }),
})(DeletePost);

const Post = ({ post }) =>
  <Box marginBottom={1}>
    <Set marginBottom={0}>
      <Text color="gray" size={-1}>
        <FormattedRelative value={post.createdAt} />
      </Text>
      <DeletePostWithData id={post.id} />
    </Set>
    <Text>
      {post.text}
    </Text>
  </Box>;

const Apollo = ({ intl }) =>
  <Page title={intl.formatMessage(sitemap.apollo.title)}>
    <Heading size={3}>
      {intl.formatMessage(sitemap.apollo.title)}
    </Heading>
    <P>Apollo with auth.</P>
    <CreatePostWithData />
    <AllPostsWithData />
  </Page>;

export default app(Apollo);
